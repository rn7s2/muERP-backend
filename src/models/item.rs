//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;

#[derive(rocket_okapi::JsonSchema, rocket::serde::Serialize, rocket::serde::Deserialize)]
#[serde(crate = "rocket::serde")]
#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "item")]
#[schemars(rename = "Item")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: u32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub specification: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub unit: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub manufacturer: String,
    pub number: i32,
    pub price: f32,
    pub expiration: Date,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::batch::Entity")]
    Batch,
    #[sea_orm(has_many = "super::stock_out::Entity")]
    StockOut,
}

impl Related<super::batch::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Batch.def()
    }
}

impl Related<super::stock_out::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StockOut.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
